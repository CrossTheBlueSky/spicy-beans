/* Related Topics - Hash Table, Linked List, Design, Doubly-Linked List

~~~~~~~~~~~~~SETUP~~~~~~~~~~
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache

Implement the LRUCache class

    -LRUCache(int capacity) Initialize the LRU cache with POSITIVE size "capacity"
    -int get(int key) Return the value of the "key" if the key exists, otherwise return -1
    -void put(int key, int value) Update the value of the "key" if the "key" exists. Otherwise,
    add the "key-value" pair to the cache. If the number of keys exceeds the "capacity" from
    this operation, EVICT the least recently used key

The functions "get and "put" must each run in 0(1) average time complexity

~~~~~~~~~~LOGIC~~~~~~~~~

1. 

 
*/

var LRUCache = function(capacity) {
    
};


LRUCache.prototype.get = function(key) {
    
};


LRUCache.prototype.put = function(key, value) {
    
};